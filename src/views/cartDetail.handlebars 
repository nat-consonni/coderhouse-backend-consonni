<section class="container">
  <a href="/products">← Volver a productos</a>

  <header class="mt-3">
    <h1>Carrito {{cid}}</h1>
    <div class="row mt-2">
      <button id="btnEmpty">Vaciar carrito</button>
      <button id="btnRefresh">Refrescar</button>
    </div>
    <p id="msg" class="muted mt-2"></p>
  </header>

  <section id="list" class="grid mt-3"></section>
</section>

<script>
  const cid = "{{cid}}";
  const list = document.getElementById("list");
  const msg  = document.getElementById("msg");

  function itemTpl(it) {
    const p = it.product || {};
    return `
      <article class="card">
        <h3>${p.title ?? "(sin título)"}</h3>
        <p>${p.description ?? ""}</p>
        <p><b>$${p.price ?? "-"}</b> · Cantidad: 
          <input type="number" min="1" value="${it.quantity}" data-act="qty" data-pid="${p._id}">
        </p>
        <small>id: ${p._id}</small>
        <div class="row mt-2">
          <button data-act="update" data-pid="${p._id}">Actualizar cantidad</button>
          <button data-act="remove" data-pid="${p._id}">Eliminar</button>
        </div>
      </article>
    `;
  }

  async function load() {
    msg.textContent = "";
    list.innerHTML = "Cargando...";
    try {
      const r = await fetch(`/api/carts/${cid}`);
      const data = await r.json();
      if (!r.ok) throw new Error(data.error || "No se pudo cargar el carrito");

      const items = data.payload?.products || data.payload || [];
      if (!items.length) {
        list.innerHTML = `<p class="muted">El carrito está vacío.</p>`;
        return;
      }
      list.innerHTML = items.map(itemTpl).join("");
    } catch (e) {
      msg.textContent = "Error: " + e.message;
      list.innerHTML = "";
    }
  }

  // Delegación de eventos para botones/inputs
  list.addEventListener("click", async (ev) => {
    const act = ev.target.dataset.act;
    const pid = ev.target.dataset.pid;
    if (!act || !pid) return;

    msg.textContent = "";
    try {
      if (act === "remove") {
        const r = await fetch(`/api/carts/${cid}/products/${pid}`, { method: "DELETE" });
        const data = await r.json();
        if (!r.ok) throw new Error(data.error || "No se pudo eliminar");
        await load();
        msg.textContent = "Producto eliminado ✅";
      }

      if (act === "update") {
        const qtyInput = list.querySelector(`input[data-act="qty"][data-pid="${pid}"]`);
        const quantity = Number(qtyInput.value) || 1;
        const r = await fetch(`/api/carts/${cid}/products/${pid}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ quantity })
        });
        const data = await r.json();
        if (!r.ok) throw new Error(data.error || "No se pudo actualizar");
        await load();
        msg.textContent = "Cantidad actualizada ✅";
      }
    } catch (e) {
      msg.textContent = "Error: " + e.message;
    }
  });

  // Vaciar y refrescar
  document.getElementById("btnEmpty").addEventListener("click", async () => {
    msg.textContent = "";
    try {
      const r = await fetch(`/api/carts/${cid}`, { method: "DELETE" });
      const data = await r.json();
      if (!r.ok) throw new Error(data.error || "No se pudo vaciar");
      await load();
      msg.textContent = "Carrito vaciado ✅";
    } catch (e) {
      msg.textContent = "Error: " + e.message;
    }
  });

  document.getElementById("btnRefresh").addEventListener("click", load);

  // primera carga
  load();
</script>
